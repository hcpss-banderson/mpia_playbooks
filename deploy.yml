---
- name: "Deploy the MPIA site"
  hosts: all
  become: yes

  vars:
    docker_pass: fake
    deploy_version: "0.0.0"
    deploy_port: "8080"
    project: mpia
    mysql_root_password: root
    mysql_password: drupal
    cleantalk_auth_key: cleantalk
    destination: "/home/{{ project }}/{{ project }}.hcpss.org"
    projects:
      mpia:
        name: mpia
        port: 8083
      ieq:
        name: ieq
        port: 8084

  roles:
    - geerlingguy.git

  tasks:
    - name: "Make sure the destination exists"
      file:
        path: "{{ destination }}"
        state: directory

    - name: "Check to see if we already have database data."
      stat:
        path: "{{ destination }}/drupal.sql"
      register: data_exists

    - name: List backup candidates
      amazon.aws.aws_s3:
        bucket: hcpss.web.backups
        prefix: "{{ project }}"
        mode: list
      register: backups
      when: not data_exists.stat.exists

    - set_fact:
        backup: "{{ backups.s3_keys | last }}"
      when: not data_exists.stat.exists

    - name: "Fetch the backup"
      amazon.aws.aws_s3:
        bucket: hcpss.web.backups
        object: "{{ backup }}"
        dest: "{{ destination }}/backup.tar.gz"
        mode: get
      when: not data_exists.stat.exists

    - name: "Make sure the backup directory exists."
      file:
        path: "{{ destination }}/backup"
        state: directory
      when: not data_exists.stat.exists

    - name: "Unarchive the backup"
      unarchive:
        src: "{{ destination }}/backup.tar.gz"
        dest: "{{ destination }}/backup"
        remote_src: yes
      when: not data_exists.stat.exists

    - name: "Move backup files into place"
      command: "mv {{ item.src }} {{ item.dest }}"
      with_items:
        - src: "{{ destination }}/backup/drupal.sql"
          dest: "{{ destination }}/drupal.sql"
        - src: "{{ destination }}/backup/private_files"
          dest: "{{ destination }}/private_files"
        - src: "{{ destination }}/backup/public_files"
          dest: "{{ destination }}/public_files"

    - name: "Clean up the backup"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ destination }}/backup"
        - "{{ destination }}/backup.tar.gz"

    - name: "Create the docker-compose.yml file"
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ destination }}/docker-compose.yml"

    - name: "Create the .env file"
      template:
        src: templates/env.j2
        dest: "{{ destination }}/.env"

    - name: "Log in to reg"
      community.docker.docker_login:
        registry_url: reg.hcpss.org
        username: banderson
        password: "{{ docker_pass }}"

    - name: Launch the containers
      community.docker.docker_compose:
        project_src: "{{ destination }}"
        pull: yes

    # - name: wait_for http
    #   command: "curl -I http://{{ project_name }}.hcpss.localhost:{{ project_port }}"
    #   register: result
    #   until: result.stdout.find("200 OK") != -1
    #   retries: 60
    #   delay: 5
    #   changed_when: false
